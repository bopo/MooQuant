--- tests/bar_test.py	(original)
+++ tests/bar_test.py	(refactored)
@@ -25,7 +25,7 @@
 from . import common
 
 try:
-    import cPickle as pickle
+    import pickle as pickle
 except ImportError as e:
     import pickle
 
@@ -48,32 +48,32 @@
 
     def testTypicalPrice(self):
         b = bar.BasicBar(datetime.datetime.now(), 2, 3, 1, 2.1, 10, 5, bar.Frequency.DAY)
-        self.assertEquals(b.getTypicalPrice(), (3 + 1 + 2.1) / 3)
+        self.assertEqual(b.getTypicalPrice(), (3 + 1 + 2.1) / 3)
 
     def testGetPrice(self):
         b = bar.BasicBar(datetime.datetime.now(), 2, 3, 1, 2.1, 10, 5, bar.Frequency.DAY)
-        self.assertEquals(b.getPrice(), b.getClose())
+        self.assertEqual(b.getPrice(), b.getClose())
         
         b.setUseAdjustedValue(True)
-        self.assertEquals(b.getPrice(), b.getAdjClose())
+        self.assertEqual(b.getPrice(), b.getAdjClose())
 
     def testPickle(self):
         b1 = bar.BasicBar(datetime.datetime.now(), 2, 3, 1, 2.1, 10, 5, bar.Frequency.DAY)
         b2 = pickle.loads(pickle.dumps(b1))
 
-        self.assertEquals(b1.getDateTime(), b2.getDateTime())
-        self.assertEquals(b1.getOpen(), b2.getOpen())
-        self.assertEquals(b1.getHigh(), b2.getHigh())
-        self.assertEquals(b1.getLow(), b2.getLow())
-        self.assertEquals(b1.getClose(), b2.getClose())
-        self.assertEquals(b1.getVolume(), b2.getVolume())
-        self.assertEquals(b1.getAdjClose(), b2.getAdjClose())
-        self.assertEquals(b1.getFrequency(), b2.getFrequency())
-        self.assertEquals(b1.getPrice(), b2.getPrice())
-        self.assertEquals(b1.getOpen(True), b2.getOpen(True))
-        self.assertEquals(b1.getHigh(True), b2.getHigh(True))
-        self.assertEquals(b1.getLow(True), b2.getLow(True))
-        self.assertEquals(b1.getClose(True), b2.getClose(True))
+        self.assertEqual(b1.getDateTime(), b2.getDateTime())
+        self.assertEqual(b1.getOpen(), b2.getOpen())
+        self.assertEqual(b1.getHigh(), b2.getHigh())
+        self.assertEqual(b1.getLow(), b2.getLow())
+        self.assertEqual(b1.getClose(), b2.getClose())
+        self.assertEqual(b1.getVolume(), b2.getVolume())
+        self.assertEqual(b1.getAdjClose(), b2.getAdjClose())
+        self.assertEqual(b1.getFrequency(), b2.getFrequency())
+        self.assertEqual(b1.getPrice(), b2.getPrice())
+        self.assertEqual(b1.getOpen(True), b2.getOpen(True))
+        self.assertEqual(b1.getHigh(True), b2.getHigh(True))
+        self.assertEqual(b1.getLow(True), b2.getLow(True))
+        self.assertEqual(b1.getClose(True), b2.getClose(True))
 
     def testNoAdjClose(self):
         b = bar.BasicBar(datetime.datetime.now(), 2, 3, 1, 2.1, 10, None, bar.Frequency.DAY)
@@ -112,13 +112,13 @@
         
         bars = bar.Bars({"a": b1, "b": b2})
 
-        self.assertEquals(bars["a"].getClose(), 1)
-        self.assertEquals(bars["b"].getClose(), 2)
+        self.assertEqual(bars["a"].getClose(), 1)
+        self.assertEqual(bars["b"].getClose(), 2)
         
         self.assertTrue("a" in bars)
         
-        self.assertEquals(bars.iteritems(), [("a", b1), ("b", b2)])
-        self.assertEquals(bars.keys(), ["a", "b"])
-        self.assertEquals(bars.getInstruments(), ["a", "b"])
-        self.assertEquals(bars.getDateTime(), dt)
-        self.assertEquals(bars.getBar("a").getClose(), 1)
+        self.assertEqual(iter(bars.items()), [("a", b1), ("b", b2)])
+        self.assertEqual(list(bars.keys()), ["a", "b"])
+        self.assertEqual(bars.getInstruments(), ["a", "b"])
+        self.assertEqual(bars.getDateTime(), dt)
+        self.assertEqual(bars.getBar("a").getClose(), 1)
--- tests/barfeed_test.py	(original)
+++ tests/barfeed_test.py	(refactored)
@@ -30,13 +30,13 @@
 
     def callback(dateTime, bars):
         called["called"] = True
-        testCase.assertEquals(barFeed.getCurrentDateTime(), dateTime)
+        testCase.assertEqual(barFeed.getCurrentDateTime(), dateTime)
 
-    testCase.assertEquals(barFeed.getCurrentDateTime(), None)
-    testCase.assertEquals(barFeed.barsHaveAdjClose(), barsHaveAdjClose)
+    testCase.assertEqual(barFeed.getCurrentDateTime(), None)
+    testCase.assertEqual(barFeed.barsHaveAdjClose(), barsHaveAdjClose)
     
     if not barsHaveAdjClose:
-        with testCase.assertRaisesRegexp(Exception, "The barfeed doesn't support adjusted close values.*"):
+        with testCase.assertRaisesRegex(Exception, "The barfeed doesn't support adjusted close values.*"):
             barFeed.setUseAdjustedValues(True)
 
     d = dispatcher.Dispatcher()
@@ -45,7 +45,7 @@
     barFeed.getNewValuesEvent().subscribe(callback)
     d.run()
 
-    testCase.assertEquals(called["called"], True)
+    testCase.assertEqual(called["called"], True)
 
 
 class OptimizerBarFeedTestCase(common.TestCase):
@@ -55,7 +55,7 @@
             bar.Bars({"orcl": bar.BasicBar(datetime.datetime(2001, 1, 1), 1, 1, 1, 1, 1, 1, bar.Frequency.DAY)}),
         ]
         f = barfeed.OptimizerBarFeed(bar.Frequency.DAY, ["orcl"], bars)
-        with self.assertRaisesRegexp(Exception, "Bar date times are not in order.*"):
+        with self.assertRaisesRegex(Exception, "Bar date times are not in order.*"):
             for dt, b in f:
                 pass
 
@@ -77,7 +77,7 @@
 
     def testEmtpy(self):
         barFeed = barfeed.OptimizerBarFeed(bar.Frequency.DAY, ["orcl"], [])
-        self.assertEquals(barFeed.barsHaveAdjClose(), False)
+        self.assertEqual(barFeed.barsHaveAdjClose(), False)
 
 
 class CommonTestCase(common.TestCase):
--- tests/broker_backtesting_test.py	(original)
+++ tests/broker_backtesting_test.py	(refactored)
@@ -23,7 +23,7 @@
 from mooquant import bar, barfeed, broker
 from mooquant.broker import backtesting
 
-import common
+from . import common
 
 
 class OrderUpdateCallback:
@@ -167,9 +167,9 @@
 
         # Buy order.
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         barFeed.dispatchBars(10, 15, 8, 12)
         self.assertTrue(order.isFilled())
@@ -179,14 +179,14 @@
         # Create a sell limit and a stop loss order.
         order = brk.createLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 11, 1)
         orders["sell"] = order
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         order = brk.createStopOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 8, 1)
         orders["stoploss"] = order
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(10, 15, 5, 12)
 
         # Only one order (the sell limit order) should have got filled. The other one should be canceled.
@@ -206,13 +206,13 @@
 
         brk.getOrderUpdatedEvent().subscribe(onOrderEvent)
         o1 = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
-        self.assertEquals(o1.getSubmitDateTime(), None)
+        self.assertEqual(o1.getSubmitDateTime(), None)
         brk.submitOrder(o1)
-        self.assertEquals(o1.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(o1.getSubmitDateTime(), barFeed.getCurrentDateTime())
         o2 = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
-        self.assertEquals(o2.getSubmitDateTime(), None)
+        self.assertEqual(o2.getSubmitDateTime(), None)
         brk.submitOrder(o2)
-        self.assertEquals(o2.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(o2.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         self.assertEqual(o1.getFilled(), 0)
         self.assertEqual(o2.getFilled(), 0)
@@ -221,8 +221,8 @@
 
         barFeed.dispatchBars(10, 15, 8, 12)
 
-        self.assertNotEquals(o1.getSubmitDateTime(), barFeed.getCurrentDateTime())
-        self.assertNotEquals(o2.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertNotEqual(o1.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertNotEqual(o2.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         self.assertEqual(o1.getFilled(), 1)
         self.assertEqual(o2.getFilled(), 1)
@@ -240,9 +240,9 @@
         brk = self.buildBroker(1000, barFeed)
 
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 3)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 3)
 
@@ -264,9 +264,9 @@
 
         # Try with different order types.
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 3)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 3)
 
@@ -293,9 +293,9 @@
         brk.getOrderUpdatedEvent().subscribe(onOrderEvent)
 
         order = brk.createLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 2, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         barFeed.dispatchBars(10, 15, 8, 12)
         # Check that cancelation event gets emited right away.
@@ -311,24 +311,24 @@
             if orderEvent.getEventType() != broker.OrderEvent.Type.SUBMITTED:
                 ordersUpdated.append(orderEvent.getOrder())
                 newOrder = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
-                self.assertEquals(newOrder.getSubmitDateTime(), None)
+                self.assertEqual(newOrder.getSubmitDateTime(), None)
                 brk.submitOrder(newOrder)
-                self.assertEquals(newOrder.getSubmitDateTime(), barFeed.getCurrentDateTime())
+                self.assertEqual(newOrder.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         brk.getOrderUpdatedEvent().subscribe(onOrderEvent)
 
         # The first order gets submitted.
         firstOrder = brk.createLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 2, 1)
-        self.assertEquals(firstOrder.getSubmitDateTime(), None)
+        self.assertEqual(firstOrder.getSubmitDateTime(), None)
         brk.submitOrder(firstOrder)
-        self.assertEquals(firstOrder.getSubmitDateTime(), barFeed.getCurrentDateTime())
-        self.assertEquals(len(ordersUpdated), 0)
+        self.assertEqual(firstOrder.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(len(ordersUpdated), 0)
 
         # The first order gets accepted, and the second one gets submitted..
         barFeed.dispatchBars(10, 15, 8, 12)
-        self.assertEquals(len(ordersUpdated), 1)  # First order got accepted.
+        self.assertEqual(len(ordersUpdated), 1)  # First order got accepted.
         self.assertTrue(firstOrder in ordersUpdated)
-        self.assertEquals(len(brk.getActiveOrders()), 2)  # Both orders are active.
+        self.assertEqual(len(brk.getActiveOrders()), 2)  # Both orders are active.
         # Check that the first one was accepted, and the second one submitted.
         for activeOrder in brk.getActiveOrders():
             if activeOrder.getId() == firstOrder.getId():
@@ -338,7 +338,7 @@
 
         # Second order should get accepted and filled.
         barFeed.dispatchBars(10, 15, 8, 12)
-        self.assertEquals(len(ordersUpdated), 3)
+        self.assertEqual(len(ordersUpdated), 3)
         self.assertTrue(firstOrder.isAccepted())
 
     def testPartialFillAndCancel(self):
@@ -347,9 +347,9 @@
         cb = OrderUpdateCallback(brk)
 
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         # 2 should get filled.
         barFeed.dispatchBars(12, 15, 8, 12, 10)
@@ -371,13 +371,13 @@
         brk = self.buildBroker(1000, barFeed)
 
         order1 = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 2)
-        self.assertEquals(order1.getSubmitDateTime(), None)
+        self.assertEqual(order1.getSubmitDateTime(), None)
         brk.submitOrder(order1)
-        self.assertEquals(order1.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order1.getSubmitDateTime(), barFeed.getCurrentDateTime())
         order2 = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 2)
-        self.assertEquals(order2.getSubmitDateTime(), None)
+        self.assertEqual(order2.getSubmitDateTime(), None)
         brk.submitOrder(order2)
-        self.assertEquals(order2.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order2.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         barFeed.dispatchBars(12, 15, 8, 12, 10)
         # 2 should get filled for the first order.
@@ -410,13 +410,13 @@
         brk = self.buildBroker(1000, barFeed)
 
         order1 = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
-        self.assertEquals(order1.getSubmitDateTime(), None)
+        self.assertEqual(order1.getSubmitDateTime(), None)
         brk.submitOrder(order1)
-        self.assertEquals(order1.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order1.getSubmitDateTime(), barFeed.getCurrentDateTime())
         order2 = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
-        self.assertEquals(order2.getSubmitDateTime(), None)
+        self.assertEqual(order2.getSubmitDateTime(), None)
         brk.submitOrder(order2)
-        self.assertEquals(order2.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order2.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         barFeed.dispatchBars(12, 15, 8, 12, 10)
         # 1 should get filled for the first order.
@@ -441,13 +441,13 @@
         brk = self.buildBroker(1000, barFeed)
 
         order1 = brk.createMarketOrder(broker.Order.Action.BUY, "ins1", 1)
-        self.assertEquals(order1.getSubmitDateTime(), None)
+        self.assertEqual(order1.getSubmitDateTime(), None)
         brk.submitOrder(order1)
-        self.assertEquals(order1.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order1.getSubmitDateTime(), barFeed.getCurrentDateTime())
         order2 = brk.createMarketOrder(broker.Order.Action.BUY, "ins2", 1)
-        self.assertEquals(order2.getSubmitDateTime(), None)
+        self.assertEqual(order2.getSubmitDateTime(), None)
         brk.submitOrder(order2)
-        self.assertEquals(order2.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order2.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         self.assertEqual(len(brk.getActiveOrders()), 2)
         self.assertEqual(len(brk.getActiveOrders("ins1")), 1)
@@ -466,14 +466,14 @@
         brk.submitOrder(order)
         barFeed.dispatchBars(12.03, 12.03, 12.03, 12.03, 555.00)
         self.assertTrue(order.isFilled())
-        self.assertEquals(brk.getPositions().get(BaseTestCase.TestInstrument), 1)
+        self.assertEqual(brk.getPositions().get(BaseTestCase.TestInstrument), 1)
 
         # Sell
         order = brk.createMarketOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 1)
         brk.submitOrder(order)
         barFeed.dispatchBars(12.03, 12.03, 12.03, 12.03, 555.00)
         self.assertTrue(order.isFilled())
-        self.assertEquals(brk.getPositions().get(BaseTestCase.TestInstrument), None)
+        self.assertEqual(brk.getPositions().get(BaseTestCase.TestInstrument), None)
 
     def testBuyPartialWithTwoDecimals(self):
         class Broker(backtesting.Broker):
@@ -486,9 +486,9 @@
 
         # Buy
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 500)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         # 138.75 should get filled.
         barFeed.dispatchBars(12.03, 12.03, 12.03, 12.03, 555.00)
@@ -527,9 +527,9 @@
 
         # Buy
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         volumes = [0.0001, 0.1, 0.0000001, 0.00000001, 0.132401]
         volumeFill = [(volume, round(volume*maxFill, quantityPresicion)) for volume in volumes]
@@ -568,9 +568,9 @@
 
         # Buy
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         # 2 should get filled.
         barFeed.dispatchBars(12, 15, 8, 12, 10)
         self.assertTrue(order.isPartiallyFilled())
@@ -601,9 +601,9 @@
 
         # Sell
         order = brk.createMarketOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         # 0 should get filled.
         barFeed.dispatchBars(12, 15, 8, 12, 2)
         self.assertTrue(order.isAccepted())
@@ -635,9 +635,9 @@
         # Buy
         cb = OrderUpdateCallback(brk)
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         barFeed.dispatchBars(10, 15, 8, 12)
@@ -657,9 +657,9 @@
         order = brk.createMarketOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(10, 15, 8, 12)
         self.assertTrue(order.isFilled())
         self.assertEqual(order.getAvgFillPrice(), 10)
@@ -680,9 +680,9 @@
 
         # Fail to buy. No money.
         cb = OrderUpdateCallback(brk)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         barFeed.dispatchBars(10, 15, 8, 12, sessionClose=True)
@@ -720,9 +720,9 @@
 
         # Fail to buy. No money.
         cb = OrderUpdateCallback(brk)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         # Set sessionClose to true test that the order doesn't get canceled.
         barFeed.dispatchBars(10, 15, 8, 12, sessionClose=True)
         self.assertTrue(order.isAccepted())
@@ -754,9 +754,9 @@
 
         # Buy
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 2)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 2)
         barFeed.dispatchBars(10, 15, 8, 12)
@@ -772,9 +772,9 @@
 
         # Sell
         order = brk.createMarketOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         barFeed.dispatchBars(10, 15, 8, 12)
@@ -792,9 +792,9 @@
         order = brk.createMarketOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(11, 15, 8, 12)
         self.assertTrue(order.isFilled())
         self.assertEqual(order.getAvgFillPrice(), 11)
@@ -812,9 +812,9 @@
 
         # Buy
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -838,9 +838,9 @@
 
         # Buy
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 100)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 100)
         barFeed.dispatchBars(10, 15, 8, 12, volume=500)
@@ -859,9 +859,9 @@
 
         # Short sell
         order = brk.createMarketOrder(broker.Order.Action.SELL_SHORT, BaseTestCase.TestInstrument, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         barFeed.dispatchBars(200, 200, 200, 200)
@@ -884,9 +884,9 @@
         order = brk.createMarketOrder(broker.Order.Action.BUY_TO_COVER, BaseTestCase.TestInstrument, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(200, 200, 200, 200)
         self.assertTrue(order.isFilled())
         self.assertEqual(order.getAvgFillPrice(), 200)
@@ -905,9 +905,9 @@
         order = brk.createMarketOrder(broker.Order.Action.SELL_SHORT, BaseTestCase.TestInstrument, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(100, 100, 100, 100)
         self.assertTrue(order.isFilled())
         self.assertEqual(order.getFilled(), 1)
@@ -929,9 +929,9 @@
         order = brk.createMarketOrder(broker.Order.Action.BUY_TO_COVER, BaseTestCase.TestInstrument, 2)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 2)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(50, 50, 50, 50)
         self.assertTrue(order.isFilled())
         self.assertEqual(order.getAvgFillPrice(), 50)
@@ -949,9 +949,9 @@
         order = brk.createMarketOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(100, 100, 100, 100)
         self.assertTrue(order.isFilled())
         self.assertEqual(order.getFilled(), 1)
@@ -970,9 +970,9 @@
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(100, 100, 100, 100)
         self.assertEqual(order.getFilled(), 1)
         self.assertEqual(order.getRemaining(), 0)
@@ -986,9 +986,9 @@
         order = brk.createMarketOrder(broker.Order.Action.SELL_SHORT, BaseTestCase.TestInstrument, 2)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 2)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(100, 100, 100, 100)
         self.assertEqual(order.getFilled(), 2)
         self.assertEqual(order.getRemaining(), 0)
@@ -1000,9 +1000,9 @@
 
         # Buy 1
         order = brk.createMarketOrder(broker.Order.Action.BUY_TO_COVER, BaseTestCase.TestInstrument, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         barFeed.dispatchBars(100, 100, 100, 100)
@@ -1024,9 +1024,9 @@
         order = brk.createMarketOrder(broker.Order.Action.SELL_SHORT, BaseTestCase.TestInstrument, 10)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(sharePrice, sharePrice, sharePrice, sharePrice)
         self.assertEqual(order.getFilled(), 10)
         self.assertEqual(order.getRemaining(), 0)
@@ -1038,9 +1038,9 @@
 
         # Buy the 10 shares sold short plus 9 extra
         order = brk.createMarketOrder(broker.Order.Action.BUY_TO_COVER, BaseTestCase.TestInstrument, 19)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 19)
         barFeed.dispatchBars(sharePrice, sharePrice, sharePrice, sharePrice)
@@ -1059,9 +1059,9 @@
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         brk.cancelOrder(order)
@@ -1080,9 +1080,9 @@
 
         # Buy
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getCommissions(), 0)
         # 2 should get filled.
         barFeed.dispatchBars(12, 15, 8, 12, 10)
@@ -1122,9 +1122,9 @@
 
         # Buy
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getCommissions(), 0)
         # 2 should get filled.
         barFeed.dispatchBars(12, 15, 8, 12, 10)
@@ -1164,7 +1164,7 @@
 
         # Buy
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 2, onClose=True)
-        self.assertEquals(order.getSubmitDateTime(), None)
+        self.assertEqual(order.getSubmitDateTime(), None)
         brk.submitOrder(order)
 
         # 2 should get filled at the closing price.
@@ -1181,7 +1181,7 @@
         cash = 1000000
         brk = backtesting.Broker(cash, barFeed)
 
-        with self.assertRaisesRegexp(Exception, "Market-on-close not supported with intraday feeds"):
+        with self.assertRaisesRegex(Exception, "Market-on-close not supported with intraday feeds"):
             brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1, onClose=True)
 
 
@@ -1192,9 +1192,9 @@
 
         # Buy
         order = brk.createLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 10, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         # 2 should get filled.
         barFeed.dispatchBars(12, 15, 8, 12, 10)
         self.assertTrue(order.isPartiallyFilled())
@@ -1225,9 +1225,9 @@
 
         # Sell
         order = brk.createLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 10, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         # 0 should get filled.
         barFeed.dispatchBars(12, 15, 8, 12, 2)
         self.assertTrue(order.isAccepted())
@@ -1261,9 +1261,9 @@
         order = brk.createLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 10, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(12, 15, 8, 12)
         self.assertEqual(order.getFilled(), 1)
         self.assertEqual(order.getRemaining(), 0)
@@ -1279,9 +1279,9 @@
         # Sell
         cb = OrderUpdateCallback(brk)
         order = brk.createLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 15, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         barFeed.dispatchBars(10, 17, 8, 10)
@@ -1305,9 +1305,9 @@
         order = brk.createLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 14, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(12, 15, 8, 12)
         self.assertEqual(order.getFilled(), 1)
         self.assertEqual(order.getRemaining(), 0)
@@ -1323,9 +1323,9 @@
         # Sell
         cb = OrderUpdateCallback(brk)
         order = brk.createLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 15, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         barFeed.dispatchBars(16, 17, 8, 10)
@@ -1347,9 +1347,9 @@
         # Buy. Bar is below the target price.
         cb = OrderUpdateCallback(brk)
         order = brk.createLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 20, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         barFeed.dispatchBars(10, 15, 8, 10)
@@ -1369,9 +1369,9 @@
         order = brk.createLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 30, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(35, 40, 32, 35)
         self.assertEqual(order.getFilled(), 1)
         self.assertEqual(order.getRemaining(), 0)
@@ -1394,9 +1394,9 @@
 
         # Fail to buy (couldn't get specific price).
         cb = OrderUpdateCallback(brk)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(10, 15, 8, 12, sessionClose=True)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
@@ -1432,9 +1432,9 @@
 
         # Fail to buy (couldn't get specific price).
         cb = OrderUpdateCallback(brk)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         # Set sessionClose to true test that the order doesn't get canceled.
         barFeed.dispatchBars(10, 15, 8, 12, sessionClose=True)
         self.assertEqual(order.getFilled(), 0)
@@ -1468,9 +1468,9 @@
 
         # Buy. Stop >= 15.
         order = brk.createStopOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 15, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         # 0 should get filled. There is not enough volume.
         barFeed.dispatchBars(18, 19, 17.01, 18, 3)
@@ -1487,9 +1487,9 @@
 
         # Buy. Stop >= 15.
         order = brk.createStopOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 15, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         # 0 should get filled. The stop price should have not been hit.
         barFeed.dispatchBars(12, 14, 8, 12, 10)
@@ -1528,9 +1528,9 @@
 
         # Sell. Stop <= 19.
         order = brk.createStopOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 19, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         # 0 should get filled. The stop price should have not been hit.
         barFeed.dispatchBars(19.1, 19.5, 19.1, 19.4, 10)
         self.assertTrue(order.isAccepted())
@@ -1590,9 +1590,9 @@
 
         # Buy. Stop >= 15.
         order = brk.createStopOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 15, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         # 5 should get filled.
         barFeed.dispatchBars(18, 18, 16, 18, 20)
@@ -1622,9 +1622,9 @@
 
         # Sell. Stop <= 19.
         order = brk.createStopOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 19, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         # 5 should get filled.
         barFeed.dispatchBars(20, 21, 17, 18, 20)
         self.assertEqual(order.getStopHit(), True)
@@ -1678,9 +1678,9 @@
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(10, 15, 8, 12)
         self.assertTrue(order.isFilled())
         self.assertEqual(order.getFilled(), 1)
@@ -1698,9 +1698,9 @@
         order = brk.createStopOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 9, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(10, 15, 10, 12)  # Stop loss not hit.
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
@@ -1729,9 +1729,9 @@
         order = brk.createMarketOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(10, 15, 8, 12)
         self.assertTrue(order.isFilled())
         self.assertEqual(order.getFilled(), 1)
@@ -1747,9 +1747,9 @@
         # Create stop loss order.
         cb = OrderUpdateCallback(brk)
         order = brk.createStopOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 9, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         barFeed.dispatchBars(10, 15, 10, 12)  # Stop loss not hit.
@@ -1778,9 +1778,9 @@
         # Sell short
         cb = OrderUpdateCallback(brk)
         order = brk.createMarketOrder(broker.Order.Action.SELL_SHORT, BaseTestCase.TestInstrument, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         barFeed.dispatchBars(10, 15, 8, 12)
@@ -1798,9 +1798,9 @@
         # Create stop loss order.
         cb = OrderUpdateCallback(brk)
         order = brk.createStopOrder(broker.Order.Action.BUY_TO_COVER, BaseTestCase.TestInstrument, 11, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         barFeed.dispatchBars(8, 10, 7, 9)  # Stop loss not hit.
@@ -1830,9 +1830,9 @@
         order = brk.createMarketOrder(broker.Order.Action.SELL_SHORT, BaseTestCase.TestInstrument, 1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         barFeed.dispatchBars(10, 15, 8, 12)
         self.assertTrue(order.isFilled())
         self.assertEqual(order.getFilled(), 1)
@@ -1848,9 +1848,9 @@
         # Create stop loss order.
         cb = OrderUpdateCallback(brk)
         order = brk.createStopOrder(broker.Order.Action.BUY_TO_COVER, BaseTestCase.TestInstrument, 11, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
         barFeed.dispatchBars(8, 10, 7, 9)  # Stop loss not hit.
@@ -1880,9 +1880,9 @@
 
         # Buy. Stop >= 15. Buy <= 17.
         order = brk.createStopLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 15, 17, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         # 0 should get filled. There is not enough volume.
         barFeed.dispatchBars(18, 19, 15, 18, 3)
@@ -1899,9 +1899,9 @@
 
         # Buy. Stop >= 15. Buy <= 17.
         order = brk.createStopLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 15, 17, 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         # 1 should get filled at 17. Before the bug was fixed it was filled at 15.
         barFeed.dispatchBars(18, 18, 16, 18, 20)
@@ -1919,9 +1919,9 @@
 
         # Buy. Stop >= 15. Buy <= 17.
         order = brk.createStopLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 15, 17, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         # 0 should get filled. The stop price should have not been hit.
         barFeed.dispatchBars(12, 14, 8, 12, 10)
@@ -1969,9 +1969,9 @@
 
         # Sell. Stop <= 19. Sell >= 20.
         order = brk.createStopLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 19, 20, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         # 0 should get filled. The stop price should have not been hit.
         barFeed.dispatchBars(19.1, 19.5, 19.1, 19.4, 10)
         self.assertTrue(order.isAccepted())
@@ -2040,9 +2040,9 @@
 
         # Buy. Stop >= 15. Buy <= 17.
         order = brk.createStopLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, 15, 17, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
 
         # 5 should get filled.
         barFeed.dispatchBars(18, 18, 16, 18, 20)
@@ -2074,9 +2074,9 @@
 
         # Sell. Stop <= 19. Sell >= 20.
         order = brk.createStopLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, 19, 20, 10)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         # 5 should get filled.
         barFeed.dispatchBars(20, 21, 17, 18, 20)
         self.assertTrue(order.isPartiallyFilled())
@@ -2131,9 +2131,9 @@
         order = brk.createStopLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, stopPrice=10, limitPrice=12, quantity=1)
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2162,9 +2162,9 @@
 
         # Sell. Stop <= 8. Sell >= 6.
         order = brk.createStopLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, stopPrice=8, limitPrice=6, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2197,9 +2197,9 @@
 
         # Buy. Stop >= 10. Buy <= 12.
         order = brk.createStopLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, stopPrice=10, limitPrice=12, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2228,9 +2228,9 @@
 
         # Sell. Stop <= 8. Sell >= 6.
         order = brk.createStopLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, stopPrice=8, limitPrice=6, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2263,9 +2263,9 @@
 
         # Buy. Stop >= 10. Buy <= 12.
         order = brk.createStopLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, stopPrice=10, limitPrice=12, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2294,9 +2294,9 @@
 
         # Sell. Stop <= 8. Sell >= 6.
         order = brk.createStopLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, stopPrice=8, limitPrice=6, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2329,9 +2329,9 @@
 
         # Buy. Stop >= 10. Buy <= 12.
         order = brk.createStopLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, stopPrice=10, limitPrice=12, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2346,9 +2346,9 @@
 
         # Sell. Stop <= 8. Sell >= 6.
         order = brk.createStopLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, stopPrice=8, limitPrice=6, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2367,9 +2367,9 @@
 
         # Buy. Stop >= 12. Buy <= 10.
         order = brk.createStopLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, stopPrice=12, limitPrice=10, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2398,9 +2398,9 @@
 
         # Sell. Stop <= 6. Sell >= 8.
         order = brk.createStopLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, stopPrice=6, limitPrice=8, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2433,9 +2433,9 @@
 
         # Buy. Stop >= 12. Buy <= 10.
         order = brk.createStopLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, stopPrice=12, limitPrice=10, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2464,9 +2464,9 @@
 
         # Sell. Stop <= 6. Sell >= 8.
         order = brk.createStopLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, stopPrice=6, limitPrice=8, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2499,9 +2499,9 @@
 
         # Buy. Stop >= 12. Buy <= 10.
         order = brk.createStopLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, stopPrice=12, limitPrice=10, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2530,9 +2530,9 @@
 
         # Sell. Stop <= 6. Sell >= 8.
         order = brk.createStopLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, stopPrice=6, limitPrice=8, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2565,9 +2565,9 @@
 
         # Buy. Stop >= 12. Buy <= 10.
         order = brk.createStopLimitOrder(broker.Order.Action.BUY, BaseTestCase.TestInstrument, stopPrice=12, limitPrice=10, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
@@ -2582,9 +2582,9 @@
 
         # Sell. Stop <= 6. Sell >= 8.
         order = brk.createStopLimitOrder(broker.Order.Action.SELL, BaseTestCase.TestInstrument, stopPrice=6, limitPrice=8, quantity=1)
-        self.assertEquals(order.getSubmitDateTime(), None)
-        brk.submitOrder(order)
-        self.assertEquals(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
+        self.assertEqual(order.getSubmitDateTime(), None)
+        brk.submitOrder(order)
+        self.assertEqual(order.getSubmitDateTime(), barFeed.getCurrentDateTime())
         self.assertEqual(order.getFilled(), 0)
         self.assertEqual(order.getRemaining(), 1)
 
--- tests/broker_test.py	(original)
+++ tests/broker_test.py	(refactored)
@@ -22,7 +22,7 @@
 
 from mooquant import broker
 
-import common
+from . import common
 
 
 class DefaultTraits(broker.InstrumentTraits):
@@ -33,10 +33,10 @@
 class OrderTestCase(common.TestCase):
     def __buildAcceptedLimitOrder(self, action, limitPrice, quantity):
         ret = broker.LimitOrder(action, "orcl", limitPrice, quantity, DefaultTraits())
-        self.assertEquals(ret.getSubmitDateTime(), None)
+        self.assertEqual(ret.getSubmitDateTime(), None)
         ret.switchState(broker.Order.State.SUBMITTED)
         ret.setSubmitted(1, datetime.datetime.now())
-        self.assertNotEquals(ret.getSubmitDateTime(), None)
+        self.assertNotEqual(ret.getSubmitDateTime(), None)
         ret.switchState(broker.Order.State.ACCEPTED)
         return ret
 
--- tests/btcharts_test.py	(original)
+++ tests/btcharts_test.py	(refactored)
@@ -23,7 +23,7 @@
 from mooquant.bitcoincharts import barfeed
 from mooquant.utils import dt
 
-import common
+from . import common
 
 
 class TestCase(common.TestCase):
@@ -32,52 +32,52 @@
         feed.addBarsFromCSV(common.get_data_file_path("bitstampUSD.csv"))
         loaded = [(dateTime, bars) for dateTime, bars in feed]
 
-        self.assertEquals(len(loaded), 9999)
+        self.assertEqual(len(loaded), 9999)
 
-        self.assertEquals(loaded[0][0], dt.as_utc(datetime.datetime(2011, 9, 13, 13, 53, 36)))
-        self.assertEquals(loaded[0][1]["BTC"].getDateTime(), dt.as_utc(datetime.datetime(2011, 9, 13, 13, 53, 36)))
-        self.assertEquals(loaded[0][1]["BTC"].getClose(), 5.8)
-        self.assertEquals(loaded[0][1]["BTC"].getPrice(), 5.8)
-        self.assertEquals(loaded[0][1]["BTC"].getVolume(), 1.0)
+        self.assertEqual(loaded[0][0], dt.as_utc(datetime.datetime(2011, 9, 13, 13, 53, 36)))
+        self.assertEqual(loaded[0][1]["BTC"].getDateTime(), dt.as_utc(datetime.datetime(2011, 9, 13, 13, 53, 36)))
+        self.assertEqual(loaded[0][1]["BTC"].getClose(), 5.8)
+        self.assertEqual(loaded[0][1]["BTC"].getPrice(), 5.8)
+        self.assertEqual(loaded[0][1]["BTC"].getVolume(), 1.0)
 
-        self.assertEquals(loaded[-1][0], dt.as_utc(datetime.datetime(2012, 5, 31, 8, 41, 18, 5)))
-        self.assertEquals(loaded[-1][1]["BTC"].getDateTime(), dt.as_utc(datetime.datetime(2012, 5, 31, 8, 41, 18, 5)))
-        self.assertEquals(loaded[-1][1]["BTC"].getClose(), 5.1)
-        self.assertEquals(loaded[-1][1]["BTC"].getPrice(), 5.1)
-        self.assertEquals(loaded[-1][1]["BTC"].getVolume(), 0.39215686)
+        self.assertEqual(loaded[-1][0], dt.as_utc(datetime.datetime(2012, 5, 31, 8, 41, 18, 5)))
+        self.assertEqual(loaded[-1][1]["BTC"].getDateTime(), dt.as_utc(datetime.datetime(2012, 5, 31, 8, 41, 18, 5)))
+        self.assertEqual(loaded[-1][1]["BTC"].getClose(), 5.1)
+        self.assertEqual(loaded[-1][1]["BTC"].getPrice(), 5.1)
+        self.assertEqual(loaded[-1][1]["BTC"].getVolume(), 0.39215686)
 
     def testLoadFilterFrom(self):
         feed = barfeed.CSVTradeFeed()
         feed.addBarsFromCSV(common.get_data_file_path("bitstampUSD.csv"), "bitstampUSD", fromDateTime=dt.as_utc(datetime.datetime(2012, 5, 29)))
         loaded = [(dateTime, bars) for dateTime, bars in feed]
 
-        self.assertEquals(len(loaded), 646)
+        self.assertEqual(len(loaded), 646)
 
-        self.assertEquals(loaded[0][0], dt.as_utc(datetime.datetime(2012, 5, 29, 1, 47, 52)))
-        self.assertEquals(loaded[0][1]["bitstampUSD"].getDateTime(), dt.as_utc(datetime.datetime(2012, 5, 29, 1, 47, 52)))
-        self.assertEquals(loaded[0][1]["bitstampUSD"].getClose(), 5.07)
-        self.assertEquals(loaded[0][1]["bitstampUSD"].getPrice(), 5.07)
-        self.assertEquals(loaded[0][1]["bitstampUSD"].getVolume(), 1.39081288)
+        self.assertEqual(loaded[0][0], dt.as_utc(datetime.datetime(2012, 5, 29, 1, 47, 52)))
+        self.assertEqual(loaded[0][1]["bitstampUSD"].getDateTime(), dt.as_utc(datetime.datetime(2012, 5, 29, 1, 47, 52)))
+        self.assertEqual(loaded[0][1]["bitstampUSD"].getClose(), 5.07)
+        self.assertEqual(loaded[0][1]["bitstampUSD"].getPrice(), 5.07)
+        self.assertEqual(loaded[0][1]["bitstampUSD"].getVolume(), 1.39081288)
 
-        self.assertEquals(loaded[-1][0], dt.as_utc(datetime.datetime(2012, 5, 31, 8, 41, 18, 5)))
-        self.assertEquals(loaded[-1][1]["bitstampUSD"].getDateTime(), dt.as_utc(datetime.datetime(2012, 5, 31, 8, 41, 18, 5)))
-        self.assertEquals(loaded[-1][1]["bitstampUSD"].getClose(), 5.1)
-        self.assertEquals(loaded[-1][1]["bitstampUSD"].getPrice(), 5.1)
-        self.assertEquals(loaded[-1][1]["bitstampUSD"].getVolume(), 0.39215686)
+        self.assertEqual(loaded[-1][0], dt.as_utc(datetime.datetime(2012, 5, 31, 8, 41, 18, 5)))
+        self.assertEqual(loaded[-1][1]["bitstampUSD"].getDateTime(), dt.as_utc(datetime.datetime(2012, 5, 31, 8, 41, 18, 5)))
+        self.assertEqual(loaded[-1][1]["bitstampUSD"].getClose(), 5.1)
+        self.assertEqual(loaded[-1][1]["bitstampUSD"].getPrice(), 5.1)
+        self.assertEqual(loaded[-1][1]["bitstampUSD"].getVolume(), 0.39215686)
 
     def testLoadFilterFromAndTo(self):
         feed = barfeed.CSVTradeFeed()
         feed.addBarsFromCSV(common.get_data_file_path("bitstampUSD.csv"), "bitstampUSD", fromDateTime=dt.as_utc(datetime.datetime(2012, 5, 29)), toDateTime=datetime.datetime(2012, 5, 31))
         loaded = [(dateTime, bars) for dateTime, bars in feed]
 
-        self.assertEquals(len(loaded), 579)
+        self.assertEqual(len(loaded), 579)
 
-        self.assertEquals(loaded[0][0], dt.as_utc(datetime.datetime(2012, 5, 29, 1, 47, 52)))
-        self.assertEquals(loaded[0][1]["bitstampUSD"].getDateTime(), dt.as_utc(datetime.datetime(2012, 5, 29, 1, 47, 52)))
-        self.assertEquals(loaded[0][1]["bitstampUSD"].getClose(), 5.07)
-        self.assertEquals(loaded[0][1]["bitstampUSD"].getVolume(), 1.39081288)
+        self.assertEqual(loaded[0][0], dt.as_utc(datetime.datetime(2012, 5, 29, 1, 47, 52)))
+        self.assertEqual(loaded[0][1]["bitstampUSD"].getDateTime(), dt.as_utc(datetime.datetime(2012, 5, 29, 1, 47, 52)))
+        self.assertEqual(loaded[0][1]["bitstampUSD"].getClose(), 5.07)
+        self.assertEqual(loaded[0][1]["bitstampUSD"].getVolume(), 1.39081288)
 
-        self.assertEquals(loaded[-1][0], dt.as_utc(datetime.datetime(2012, 5, 30, 23, 49, 21)))
-        self.assertEquals(loaded[-1][1]["bitstampUSD"].getDateTime(), dt.as_utc(datetime.datetime(2012, 5, 30, 23, 49, 21)))
-        self.assertEquals(loaded[-1][1]["bitstampUSD"].getClose(), 5.14)
-        self.assertEquals(loaded[-1][1]["bitstampUSD"].getVolume(), 20)
+        self.assertEqual(loaded[-1][0], dt.as_utc(datetime.datetime(2012, 5, 30, 23, 49, 21)))
+        self.assertEqual(loaded[-1][1]["bitstampUSD"].getDateTime(), dt.as_utc(datetime.datetime(2012, 5, 30, 23, 49, 21)))
+        self.assertEqual(loaded[-1][1]["bitstampUSD"].getClose(), 5.14)
+        self.assertEqual(loaded[-1][1]["bitstampUSD"].getVolume(), 20)
--- tests/common.py	(original)
+++ tests/common.py	(refactored)
@@ -129,7 +129,7 @@
     inputValues, expectedValues = load_test_csv(get_data_file_path(filename))
     inputDS = dataseries.SequenceDataSeries(maxLen=maxLen)
     filterDS = filterClassBuilder(inputDS)
-    for i in xrange(len(inputValues)):
+    for i in range(len(inputValues)):
         inputDS.append(inputValues[i])
         value = safe_round(filterDS[i], roundDecimals)
         expectedValue = safe_round(expectedValues[i], roundDecimals)
--- tests/csvfeed_test.py	(original)
+++ tests/csvfeed_test.py	(refactored)
@@ -25,8 +25,8 @@
 from mooquant.feed import csvfeed
 from mooquant.utils import dt
 
-import common
-import feed_test
+from . import common
+from . import feed_test
 
 
 class TestCase(common.TestCase):
--- tests/dataseries_test.py	(original)
+++ tests/dataseries_test.py	(refactored)
@@ -23,7 +23,7 @@
 from mooquant import bar, dataseries
 from mooquant.dataseries import aligned, bards
 
-import common
+from . import common
 
 
 class TestSequenceDataSeries(common.TestCase):
@@ -60,14 +60,14 @@
         self.assertTrue(ds[9:] == [9])
 
     def testSeqLikeOps(self):
-        seq = range(10)
+        seq = list(range(10))
         ds = dataseries.SequenceDataSeries()
         for value in seq:
             ds.append(value)
 
         # Test length and every item.
         self.assertEqual(len(ds), len(seq))
-        for i in xrange(len(seq)):
+        for i in range(len(seq)):
             self.assertEqual(ds[i], seq[i])
 
         # Test negative indices
@@ -83,16 +83,16 @@
         sl = slice(0, -1, 1)
         self.assertEqual(ds[sl], seq[sl])
 
-        for i in xrange(-100, 100):
+        for i in range(-100, 100):
             self.assertEqual(ds[i:], seq[i:])
 
-        for step in xrange(1, 10):
-            for i in xrange(-100, 100):
+        for step in range(1, 10):
+            for i in range(-100, 100):
                 self.assertEqual(ds[i::step], seq[i::step])
 
     def testBounded(self):
         ds = dataseries.SequenceDataSeries(maxLen=2)
-        for i in xrange(100):
+        for i in range(100):
             ds.append(i)
             if i > 0:
                 self.assertEqual(ds[0], i - 1)
@@ -101,7 +101,7 @@
 
     def testResize1(self):
         ds = dataseries.SequenceDataSeries(100)
-        for i in xrange(100):
+        for i in range(100):
             ds.append(i)
 
         self.assertEqual(len(ds), 100)
@@ -117,7 +117,7 @@
 
     def testResize2(self):
         ds = dataseries.SequenceDataSeries()
-        for i in xrange(100):
+        for i in range(100):
             ds.append(i)
 
         ds.setMaxLen(1000)
--- tests/dbfeed_test.py	(original)
+++ tests/dbfeed_test.py	(refactored)
@@ -23,8 +23,8 @@
 from mooquant import bar, marketsession
 from mooquant.barfeed import sqlitefeed, yahoofeed
 
-import common
-import feed_test
+from . import common
+from . import feed_test
 
 
 class TemporarySQLiteFeed:
@@ -89,7 +89,7 @@
             yahooDS = yahooFeed["orcl"]
             sqliteDS = sqliteFeed["orcl"]
             self.assertEqual(len(yahooDS), len(sqliteDS))
-            for i in xrange(len(yahooDS)):
+            for i in range(len(yahooDS)):
                 self.assertEqual(yahooDS[i].getDateTime(), sqliteDS[i].getDateTime())
                 self.assertEqual(yahooDS[i].getOpen(), sqliteDS[i].getOpen())
                 self.assertEqual(yahooDS[i].getHigh(), sqliteDS[i].getHigh())
--- tests/drawdown_analyzer_test.py	(original)
+++ tests/drawdown_analyzer_test.py	(refactored)
@@ -24,8 +24,8 @@
 from mooquant.barfeed import membf, yahoofeed
 from mooquant.stratanalyzer import drawdown
 
-import common
-import strategy_test
+from . import common
+from . import strategy_test
 
 
 def build_bars_from_closing_prices(closingPrices):
--- tests/eventprofiler_test.py	(original)
+++ tests/eventprofiler_test.py	(refactored)
@@ -23,7 +23,7 @@
 from mooquant import eventprofiler
 from mooquant.barfeed import yahoofeed
 
-import common
+from . import common
 
 
 class Predicate(eventprofiler.Predicate):
--- tests/fill_strategy_test.py	(original)
+++ tests/fill_strategy_test.py	(refactored)
@@ -24,7 +24,7 @@
 from mooquant import bar, broker
 from mooquant.broker import backtesting, fillstrategy
 
-import broker_backtesting_test
+from . import broker_backtesting_test
 
 
 class BaseTestCase(unittest.TestCase):
@@ -118,14 +118,14 @@
     def testVolumeLimitPerBar(self):
         volume = 100
         self.strategy.onBars(None, self.barsBuilder.nextBars(11, 12, 4, 9, volume))
-        self.assertEquals(self.strategy.getVolumeLeft()[BaseTestCase.TestInstrument], 25)
-        self.assertEquals(self.strategy.getVolumeUsed()[BaseTestCase.TestInstrument], 0)
+        self.assertEqual(self.strategy.getVolumeLeft()[BaseTestCase.TestInstrument], 25)
+        self.assertEqual(self.strategy.getVolumeUsed()[BaseTestCase.TestInstrument], 0)
 
         self.strategy.onOrderFilled(None, self.__getFilledMarketOrder(24, 11))
-        self.assertEquals(self.strategy.getVolumeLeft()[BaseTestCase.TestInstrument], 1)
-        self.assertEquals(self.strategy.getVolumeUsed()[BaseTestCase.TestInstrument], 24)
+        self.assertEqual(self.strategy.getVolumeLeft()[BaseTestCase.TestInstrument], 1)
+        self.assertEqual(self.strategy.getVolumeUsed()[BaseTestCase.TestInstrument], 24)
 
-        with self.assertRaisesRegexp(Exception, "Invalid fill quantity 25. Not enough volume left 1"):
+        with self.assertRaisesRegex(Exception, "Invalid fill quantity 25. Not enough volume left 1"):
             self.strategy.onOrderFilled(None, self.__getFilledMarketOrder(25, 11))
-        self.assertEquals(self.strategy.getVolumeLeft()[BaseTestCase.TestInstrument], 1)
-        self.assertEquals(self.strategy.getVolumeUsed()[BaseTestCase.TestInstrument], 24)
+        self.assertEqual(self.strategy.getVolumeLeft()[BaseTestCase.TestInstrument], 1)
+        self.assertEqual(self.strategy.getVolumeUsed()[BaseTestCase.TestInstrument], 24)
--- tests/http_server.py	(original)
+++ tests/http_server.py	(refactored)
@@ -1,4 +1,4 @@
-import BaseHTTPServer
+import http.server
 import threading
 
 
@@ -14,7 +14,7 @@
         def handler_cls_builder(*args, **kwargs):
             return self.__handlerClass(*args, **kwargs)
 
-        self.__server = BaseHTTPServer.HTTPServer((self.__host, self.__port), handler_cls_builder)
+        self.__server = http.server.HTTPServer((self.__host, self.__port), handler_cls_builder)
         self.__server.serve_forever()
 
     def stop(self):
--- tests/memfeed_test.py	(original)
+++ tests/memfeed_test.py	(refactored)
@@ -23,19 +23,19 @@
 from mooquant import dispatcher
 from mooquant.feed import memfeed
 
-import common
-import feed_test
+from . import common
+from . import feed_test
 
 
 class MemFeedTestCase(common.TestCase):
     def testBaseFeedInterface(self):
-        values = [(datetime.datetime.now() + datetime.timedelta(seconds=i), {"i": i}) for i in xrange(100)]
+        values = [(datetime.datetime.now() + datetime.timedelta(seconds=i), {"i": i}) for i in range(100)]
         feed = memfeed.MemFeed()
         feed.addValues(values)
         feed_test.tstBaseFeedInterface(self, feed)
 
     def testFeed(self):
-        values = [(datetime.datetime.now() + datetime.timedelta(seconds=i), {"i": i}) for i in xrange(100)]
+        values = [(datetime.datetime.now() + datetime.timedelta(seconds=i), {"i": i}) for i in range(100)]
 
         feed = memfeed.MemFeed()
         feed.addValues(values)
@@ -56,7 +56,7 @@
 
     def testReset(self):
         key = "i"
-        values = [(datetime.datetime.now() + datetime.timedelta(seconds=i), {key: i}) for i in xrange(100)]
+        values = [(datetime.datetime.now() + datetime.timedelta(seconds=i), {key: i}) for i in range(100)]
 
         feed = memfeed.MemFeed()
         feed.addValues(values)
--- tests/multi_instrument_strategy_test.py	(original)
+++ tests/multi_instrument_strategy_test.py	(refactored)
@@ -22,7 +22,7 @@
 from mooquant.barfeed import sqlitefeed, yahoofeed
 from mooquant.technical import cross, ma
 
-import common
+from . import common
 
 
 class NikkeiSpyStrategy(strategy.BacktestingStrategy):
--- tests/observer_test.py	(original)
+++ tests/observer_test.py	(refactored)
@@ -23,7 +23,7 @@
 
 from mooquant import dispatcher, observer
 
-import common
+from . import common
 
 
 class NonRealtimeFeed(observer.Subject):
@@ -98,7 +98,7 @@
     def test1NrtFeed(self):
         values = []
         now = datetime.datetime.now()
-        datetimes = [now + datetime.timedelta(seconds=i) for i in xrange(10)]
+        datetimes = [now + datetime.timedelta(seconds=i) for i in range(10)]
         nrtFeed = NonRealtimeFeed(copy.copy(datetimes))
         nrtFeed.getEvent().subscribe(lambda x: values.append(x))
 
@@ -111,8 +111,8 @@
     def test2NrtFeeds(self):
         values = []
         now = datetime.datetime.now()
-        datetimes1 = [now + datetime.timedelta(seconds=i) for i in xrange(10)]
-        datetimes2 = [now + datetime.timedelta(seconds=i+len(datetimes1)) for i in xrange(10)]
+        datetimes1 = [now + datetime.timedelta(seconds=i) for i in range(10)]
+        datetimes2 = [now + datetime.timedelta(seconds=i+len(datetimes1)) for i in range(10)]
         nrtFeed1 = NonRealtimeFeed(copy.copy(datetimes1))
         nrtFeed1.getEvent().subscribe(lambda x: values.append(x))
         nrtFeed2 = NonRealtimeFeed(copy.copy(datetimes2))
@@ -130,7 +130,7 @@
     def test1RtFeed(self):
         values = []
         now = datetime.datetime.now()
-        datetimes = [now + datetime.timedelta(seconds=i) for i in xrange(10)]
+        datetimes = [now + datetime.timedelta(seconds=i) for i in range(10)]
         nrtFeed = RealtimeFeed(copy.copy(datetimes))
         nrtFeed.getEvent().subscribe(lambda x: values.append(x))
 
@@ -143,8 +143,8 @@
     def test2RtFeeds(self):
         values = []
         now = datetime.datetime.now()
-        datetimes1 = [now + datetime.timedelta(seconds=i) for i in xrange(10)]
-        datetimes2 = [now + datetime.timedelta(seconds=i+len(datetimes1)) for i in xrange(10)]
+        datetimes1 = [now + datetime.timedelta(seconds=i) for i in range(10)]
+        datetimes2 = [now + datetime.timedelta(seconds=i+len(datetimes1)) for i in range(10)]
         nrtFeed1 = RealtimeFeed(copy.copy(datetimes1))
         nrtFeed1.getEvent().subscribe(lambda x: values.append(x))
         nrtFeed2 = RealtimeFeed(copy.copy(datetimes2))
@@ -156,15 +156,15 @@
         disp.run()
 
         self.assertEqual(len(values), len(datetimes1) + len(datetimes2))
-        for i in xrange(len(datetimes1)):
+        for i in range(len(datetimes1)):
             self.assertEqual(values[i*2], datetimes1[i])
             self.assertEqual(values[i*2+1], datetimes2[i])
 
     def test2Combined(self):
         values = []
         now = datetime.datetime.now()
-        datetimes1 = [now + datetime.timedelta(seconds=i) for i in xrange(10)]
-        datetimes2 = [now + datetime.timedelta(seconds=i+len(datetimes1)) for i in xrange(10)]
+        datetimes1 = [now + datetime.timedelta(seconds=i) for i in range(10)]
+        datetimes2 = [now + datetime.timedelta(seconds=i+len(datetimes1)) for i in range(10)]
         nrtFeed1 = RealtimeFeed(copy.copy(datetimes1))
         nrtFeed1.getEvent().subscribe(lambda x: values.append(x))
         nrtFeed2 = NonRealtimeFeed(copy.copy(datetimes2))
@@ -176,7 +176,7 @@
         disp.run()
 
         self.assertEqual(len(values), len(datetimes1) + len(datetimes2))
-        for i in xrange(len(datetimes1)):
+        for i in range(len(datetimes1)):
             self.assertEqual(values[i*2], datetimes1[i])
             self.assertEqual(values[i*2+1], datetimes2[i])
 
--- tests/optimizer_testcase.py	(original)
+++ tests/optimizer_testcase.py	(refactored)
@@ -52,8 +52,8 @@
         res = local.run(
             sma_crossover.SMACrossOver, barFeed, parameters_generator(instrument, 5, 100), logLevel=logging.DEBUG
         )
-        self.assertEquals(round(res.getResult(), 2), 1295462.6)
-        self.assertEquals(res.getParameters()[1], 20)
+        self.assertEqual(round(res.getResult(), 2), 1295462.6)
+        self.assertEqual(res.getParameters()[1], 20)
 
     def testFailingStrategy(self):
         barFeed = yahoofeed.Feed()
--- tests/position_test.py	(original)
+++ tests/position_test.py	(refactored)
@@ -26,8 +26,8 @@
 from mooquant.strategy import position
 from mooquant.utils import dt
 
-import common
-import strategy_test
+from . import common
+from . import strategy_test
 
 
 def load_daily_barfeed(instrument):
--- tests/resample_test.py	(original)
+++ tests/resample_test.py	(refactored)
@@ -29,7 +29,7 @@
 from mooquant.tools import resample
 from mooquant.utils import dt
 
-import common
+from . import common
 
 
 class IntraDayRange(common.TestCase):
@@ -246,7 +246,7 @@
         barDs = bards.BarDataSeries()
         resampledBarDS = resampled_ds.ResampledBarDataSeries(barDs, bar.Frequency.MINUTE)
 
-        barDateTime = datetime.datetime(2014, 07, 07, 22, 46, 28, 10000)
+        barDateTime = datetime.datetime(2014, 0o7, 0o7, 22, 46, 28, 10000)
         barDs.append(bar.BasicBar(barDateTime, 2.1, 3, 1, 2, 10, 1, bar.Frequency.MINUTE))
         self.assertEqual(len(resampledBarDS), 0)
 
@@ -258,7 +258,7 @@
         self.assertEqual(barDs[0].getClose(), resampledBarDS[0].getClose())
         self.assertEqual(barDs[0].getVolume(), resampledBarDS[0].getVolume())
         self.assertEqual(barDs[0].getAdjClose(), resampledBarDS[0].getAdjClose())
-        self.assertEqual(resampledBarDS[0].getDateTime(), datetime.datetime(2014, 07, 07, 22, 46))
+        self.assertEqual(resampledBarDS[0].getDateTime(), datetime.datetime(2014, 0o7, 0o7, 22, 46))
 
 
 class BarFeedTestCase(common.TestCase):
--- tests/returns_analyzer_test.py	(original)
+++ tests/returns_analyzer_test.py	(refactored)
@@ -24,9 +24,9 @@
 from mooquant.barfeed import csvfeed, yahoofeed
 from mooquant.stratanalyzer import returns
 
-import common
-import position_test
-import strategy_test
+from . import common
+from . import position_test
+from . import strategy_test
 
 
 class TimeWeightedReturnsTestCase(common.TestCase):
@@ -42,18 +42,18 @@
         # http://www.investopedia.com/exam-guide/cfa-level-1/quantitative-methods/discounted-cash-flow-time-weighted-return.asp
         retTracker = returns.TimeWeightedReturns(200000)
         retTracker.update(196500)  # March 31, 2004
-        self.assertEquals(round(retTracker.getLastPeriodReturns(), 4), -0.0175)
+        self.assertEqual(round(retTracker.getLastPeriodReturns(), 4), -0.0175)
         retTracker.update(200000)  # June 30, 2004
-        self.assertEquals(round(retTracker.getLastPeriodReturns(), 4), 0.0178)
+        self.assertEqual(round(retTracker.getLastPeriodReturns(), 4), 0.0178)
         retTracker.deposit(20000)
         retTracker.update(222000)  # July 30, 2004
-        self.assertEquals(round(retTracker.getLastPeriodReturns(), 2), 0.01)
+        self.assertEqual(round(retTracker.getLastPeriodReturns(), 2), 0.01)
         retTracker.update(243000)  # Sept. 30, 2004
-        self.assertEquals(round(retTracker.getLastPeriodReturns(), 4), 0.0946)
+        self.assertEqual(round(retTracker.getLastPeriodReturns(), 4), 0.0946)
         retTracker.deposit(2000)
         retTracker.update(250000)  # Dec. 31, 2004
-        self.assertEquals(round(retTracker.getLastPeriodReturns(), 4), 0.0206)
-        self.assertEquals(round(retTracker.getCumulativeReturns(), 6),  0.128288)
+        self.assertEqual(round(retTracker.getLastPeriodReturns(), 4), 0.0206)
+        self.assertEqual(round(retTracker.getCumulativeReturns(), 6),  0.128288)
 
 
 class PosTrackerTestCase(common.TestCase):
@@ -274,7 +274,7 @@
     def testOneBarReturn(self):
         initialCash = 1000
         barFeed = yahoofeed.Feed()
-        barFeed.setBarFilter(csvfeed.DateRangeFilter(datetime.datetime(2001, 12, 07), datetime.datetime(2001, 12, 07)))
+        barFeed.setBarFilter(csvfeed.DateRangeFilter(datetime.datetime(2001, 12, 0o7), datetime.datetime(2001, 12, 0o7)))
         barFeed.addBarsFromCSV(AnalyzerTestCase.TestInstrument, common.get_data_file_path("orcl-2001-yahoofinance.csv"))
         strat = strategy_test.TestStrategy(barFeed, initialCash)
 
@@ -297,7 +297,7 @@
     def testTwoBarReturns_OpenOpen(self):
         initialCash = 15.61
         barFeed = yahoofeed.Feed()
-        barFeed.setBarFilter(csvfeed.DateRangeFilter(datetime.datetime(2001, 12, 06), datetime.datetime(2001, 12, 07)))
+        barFeed.setBarFilter(csvfeed.DateRangeFilter(datetime.datetime(2001, 12, 0o6), datetime.datetime(2001, 12, 0o7)))
         barFeed.addBarsFromCSV(AnalyzerTestCase.TestInstrument, common.get_data_file_path("orcl-2001-yahoofinance.csv"))
         strat = strategy_test.TestStrategy(barFeed, initialCash)
 
@@ -306,7 +306,7 @@
         # Manually place the entry order, to get it filled on the first bar.
         order = strat.getBroker().createMarketOrder(broker.Order.Action.BUY, AnalyzerTestCase.TestInstrument, 1, False)  # Open: 15.61
         strat.getBroker().submitOrder(order)
-        strat.addOrder(datetime.datetime(2001, 12, 06), strat.getBroker().createMarketOrder, broker.Order.Action.SELL, AnalyzerTestCase.TestInstrument, 1, False)  # Open: 15.74
+        strat.addOrder(datetime.datetime(2001, 12, 0o6), strat.getBroker().createMarketOrder, broker.Order.Action.SELL, AnalyzerTestCase.TestInstrument, 1, False)  # Open: 15.74
 
         stratAnalyzer = returns.Returns()
         strat.attachAnalyzer(stratAnalyzer)
@@ -320,7 +320,7 @@
     def testTwoBarReturns_OpenClose(self):
         initialCash = 15.61
         barFeed = yahoofeed.Feed()
-        barFeed.setBarFilter(csvfeed.DateRangeFilter(datetime.datetime(2001, 12, 06), datetime.datetime(2001, 12, 07)))
+        barFeed.setBarFilter(csvfeed.DateRangeFilter(datetime.datetime(2001, 12, 0o6), datetime.datetime(2001, 12, 0o7)))
         barFeed.addBarsFromCSV(AnalyzerTestCase.TestInstrument, common.get_data_file_path("orcl-2001-yahoofinance.csv"))
         strat = strategy_test.TestStrategy(barFeed, initialCash)
 
@@ -329,7 +329,7 @@
         # Manually place the entry order, to get it filled on the first bar.
         order = strat.getBroker().createMarketOrder(broker.Order.Action.BUY, AnalyzerTestCase.TestInstrument, 1, False)  # Open: 15.61
         strat.getBroker().submitOrder(order)
-        strat.addOrder(datetime.datetime(2001, 12, 06), strat.getBroker().createMarketOrder, broker.Order.Action.SELL, AnalyzerTestCase.TestInstrument, 1, True)  # Close: 15.91
+        strat.addOrder(datetime.datetime(2001, 12, 0o6), strat.getBroker().createMarketOrder, broker.Order.Action.SELL, AnalyzerTestCase.TestInstrument, 1, True)  # Close: 15.91
 
         stratAnalyzer = returns.Returns()
         strat.attachAnalyzer(stratAnalyzer)
@@ -343,7 +343,7 @@
     def testTwoBarReturns_CloseOpen(self):
         initialCash = 15.9
         barFeed = yahoofeed.Feed()
-        barFeed.setBarFilter(csvfeed.DateRangeFilter(datetime.datetime(2001, 12, 06), datetime.datetime(2001, 12, 07)))
+        barFeed.setBarFilter(csvfeed.DateRangeFilter(datetime.datetime(2001, 12, 0o6), datetime.datetime(2001, 12, 0o7)))
         barFeed.addBarsFromCSV(AnalyzerTestCase.TestInstrument, common.get_data_file_path("orcl-2001-yahoofinance.csv"))
         strat = strategy_test.TestStrategy(barFeed, initialCash)
 
@@ -352,7 +352,7 @@
         # Manually place the entry order, to get it filled on the first bar.
         order = strat.getBroker().createMarketOrder(broker.Order.Action.BUY, AnalyzerTestCase.TestInstrument, 1, True)  # Close: 15.90
         strat.getBroker().submitOrder(order)
-        strat.addOrder(datetime.datetime(2001, 12, 06), strat.getBroker().createMarketOrder, broker.Order.Action.SELL, AnalyzerTestCase.TestInstrument, 1, False)  # Open: 15.74
+        strat.addOrder(datetime.datetime(2001, 12, 0o6), strat.getBroker().createMarketOrder, broker.Order.Action.SELL, AnalyzerTestCase.TestInstrument, 1, False)  # Open: 15.74
 
         stratAnalyzer = returns.Returns()
         strat.attachAnalyzer(stratAnalyzer)
@@ -366,7 +366,7 @@
     def testTwoBarReturns_CloseClose(self):
         initialCash = 15.90
         barFeed = yahoofeed.Feed()
-        barFeed.setBarFilter(csvfeed.DateRangeFilter(datetime.datetime(2001, 12, 06), datetime.datetime(2001, 12, 07)))
+        barFeed.setBarFilter(csvfeed.DateRangeFilter(datetime.datetime(2001, 12, 0o6), datetime.datetime(2001, 12, 0o7)))
         barFeed.addBarsFromCSV(AnalyzerTestCase.TestInstrument, common.get_data_file_path("orcl-2001-yahoofinance.csv"))
         strat = strategy_test.TestStrategy(barFeed, initialCash)
 
@@ -375,7 +375,7 @@
         # Manually place the entry order, to get it filled on the first bar.
         order = strat.getBroker().createMarketOrder(broker.Order.Action.BUY, AnalyzerTestCase.TestInstrument, 1, True)  # Close: 15.90
         strat.getBroker().submitOrder(order)
-        strat.addOrder(datetime.datetime(2001, 12, 06), strat.getBroker().createMarketOrder, broker.Order.Action.SELL, AnalyzerTestCase.TestInstrument, 1, True)  # Close: 15.91
+        strat.addOrder(datetime.datetime(2001, 12, 0o6), strat.getBroker().createMarketOrder, broker.Order.Action.SELL, AnalyzerTestCase.TestInstrument, 1, True)  # Close: 15.91
 
         stratAnalyzer = returns.Returns()
         strat.attachAnalyzer(stratAnalyzer)
@@ -439,7 +439,7 @@
         barFeed.addBarsFromCSV(AnalyzerTestCase.TestInstrument, common.get_data_file_path("orcl-2001-yahoofinance.csv"))
         strat = strategy_test.TestStrategy(barFeed, initialCash)
 
-        strat.addOrder(datetime.datetime(2001, 01, 02), strat.getBroker().createMarketOrder, broker.Order.Action.BUY, AnalyzerTestCase.TestInstrument, 1, False)  # 2001-01-03 Open: 25.25 Close: 32.00
+        strat.addOrder(datetime.datetime(2001, 0o1, 0o2), strat.getBroker().createMarketOrder, broker.Order.Action.BUY, AnalyzerTestCase.TestInstrument, 1, False)  # 2001-01-03 Open: 25.25 Close: 32.00
 
         stratAnalyzer = returns.Returns()
         strat.attachAnalyzer(stratAnalyzer)
--- tests/sharpe_analyzer_test.py	(original)
+++ tests/sharpe_analyzer_test.py	(refactored)
@@ -25,8 +25,8 @@
 from mooquant.broker import backtesting
 from mooquant.stratanalyzer import sharpe
 
-import common
-import strategy_test
+from . import common
+from . import strategy_test
 
 
 class SharpeRatioTestCase(common.TestCase):
--- tests/slippage_model_test.py	(original)
+++ tests/slippage_model_test.py	(refactored)
@@ -23,7 +23,7 @@
 from mooquant import bar, broker
 from mooquant.broker import backtesting, slippage
 
-import broker_backtesting_test
+from . import broker_backtesting_test
 
 
 class BaseTestCase(unittest.TestCase):
--- tests/sma_crossover.py	(original)
+++ tests/sma_crossover.py	(refactored)
@@ -1,5 +1,5 @@
 # -*- coding: utf-8 -*-
-from __future__ import division, print_function, unicode_literals
+
 
 from mooquant import strategy
 from mooquant.technical import cross, ma
--- tests/smacrossover_strategy_test.py	(original)
+++ tests/smacrossover_strategy_test.py	(refactored)
@@ -22,7 +22,7 @@
 from mooquant.barfeed import yahoofeed
 from mooquant.technical import cross, ma
 
-import common
+from . import common
 
 
 class SMACrossOverStrategy(strategy.BacktestingStrategy):
--- tests/strategy_test.py	(original)
+++ tests/strategy_test.py	(refactored)
@@ -23,7 +23,7 @@
 from mooquant import broker, strategy
 from mooquant.barfeed import yahoofeed
 
-import common
+from . import common
 
 
 def get_by_datetime_or_date(dict_, dateTimeOrDate):
@@ -115,10 +115,10 @@
         o = strat.marketOrder(StrategyTestCase.TestInstrument, 1)
         strat.run()
         self.assertTrue(o.isFilled())
-        self.assertEquals(o.getAction(), broker.Order.Action.BUY)
-        self.assertEquals(o.getQuantity(), 1)
-        self.assertEquals(o.getFilled(), 1)
-        self.assertEquals(o.getRemaining(), 0)
+        self.assertEqual(o.getAction(), broker.Order.Action.BUY)
+        self.assertEqual(o.getQuantity(), 1)
+        self.assertEqual(o.getFilled(), 1)
+        self.assertEqual(o.getRemaining(), 0)
         self.assertEqual(strat.orderUpdatedCalls, 3)
 
     def testMarketOrderSell(self):
@@ -127,10 +127,10 @@
         o = strat.marketOrder(StrategyTestCase.TestInstrument, -2)
         strat.run()
         self.assertTrue(o.isFilled())
-        self.assertEquals(o.getAction(), broker.Order.Action.SELL)
-        self.assertEquals(o.getQuantity(), 2)
-        self.assertEquals(o.getFilled(), 2)
-        self.assertEquals(o.getRemaining(), 0)
+        self.assertEqual(o.getAction(), broker.Order.Action.SELL)
+        self.assertEqual(o.getQuantity(), 2)
+        self.assertEqual(o.getFilled(), 2)
+        self.assertEqual(o.getRemaining(), 0)
         self.assertEqual(strat.orderUpdatedCalls, 3)
 
     def testLimitOrderBuy(self):
@@ -139,11 +139,11 @@
         o = strat.limitOrder(StrategyTestCase.TestInstrument, 60, 1, True)
         strat.run()
         self.assertTrue(o.isFilled())
-        self.assertEquals(o.getAction(), broker.Order.Action.BUY)
-        self.assertEquals(o.getAvgFillPrice(), 56.13)
-        self.assertEquals(o.getQuantity(), 1)
-        self.assertEquals(o.getFilled(), 1)
-        self.assertEquals(o.getRemaining(), 0)
+        self.assertEqual(o.getAction(), broker.Order.Action.BUY)
+        self.assertEqual(o.getAvgFillPrice(), 56.13)
+        self.assertEqual(o.getQuantity(), 1)
+        self.assertEqual(o.getFilled(), 1)
+        self.assertEqual(o.getRemaining(), 0)
         self.assertEqual(strat.orderUpdatedCalls, 3)
 
     def testLimitOrderSell(self):
@@ -152,11 +152,11 @@
         o = strat.limitOrder(StrategyTestCase.TestInstrument, 60, -3, False)
         strat.run()
         self.assertTrue(o.isFilled())
-        self.assertEquals(o.getAction(), broker.Order.Action.SELL)
-        self.assertEquals(o.getAvgFillPrice(), 124.62)
-        self.assertEquals(o.getQuantity(), 3)
-        self.assertEquals(o.getFilled(), 3)
-        self.assertEquals(o.getRemaining(), 0)
+        self.assertEqual(o.getAction(), broker.Order.Action.SELL)
+        self.assertEqual(o.getAvgFillPrice(), 124.62)
+        self.assertEqual(o.getQuantity(), 3)
+        self.assertEqual(o.getFilled(), 3)
+        self.assertEqual(o.getRemaining(), 0)
         self.assertEqual(strat.orderUpdatedCalls, 3)
 
     def testStopOrderBuy(self):
@@ -165,11 +165,11 @@
         o = strat.stopOrder(StrategyTestCase.TestInstrument, 100, 1, False)
         strat.run()
         self.assertTrue(o.isFilled())
-        self.assertEquals(o.getAction(), broker.Order.Action.BUY)
-        self.assertEquals(o.getAvgFillPrice(), 124.62)
-        self.assertEquals(o.getQuantity(), 1)
-        self.assertEquals(o.getFilled(), 1)
-        self.assertEquals(o.getRemaining(), 0)
+        self.assertEqual(o.getAction(), broker.Order.Action.BUY)
+        self.assertEqual(o.getAvgFillPrice(), 124.62)
+        self.assertEqual(o.getQuantity(), 1)
+        self.assertEqual(o.getFilled(), 1)
+        self.assertEqual(o.getRemaining(), 0)
         self.assertEqual(strat.orderUpdatedCalls, 3)
 
     def testStopOrderSell(self):
@@ -178,11 +178,11 @@
         o = strat.stopOrder(StrategyTestCase.TestInstrument, 55, -2, True)
         strat.run()
         self.assertTrue(o.isFilled())
-        self.assertEquals(o.getAction(), broker.Order.Action.SELL)
-        self.assertEquals(o.getAvgFillPrice(), 55)
-        self.assertEquals(o.getQuantity(), 2)
-        self.assertEquals(o.getFilled(), 2)
-        self.assertEquals(o.getRemaining(), 0)
+        self.assertEqual(o.getAction(), broker.Order.Action.SELL)
+        self.assertEqual(o.getAvgFillPrice(), 55)
+        self.assertEqual(o.getQuantity(), 2)
+        self.assertEqual(o.getFilled(), 2)
+        self.assertEqual(o.getRemaining(), 0)
         self.assertEqual(strat.orderUpdatedCalls, 3)
         self.assertEqual(o.getExecutionInfo().getDateTime(), datetime.datetime(2000, 1, 19))
 
@@ -192,11 +192,11 @@
         o = strat.stopLimitOrder(StrategyTestCase.TestInstrument, 110, 100, 1, True)
         strat.run()
         self.assertTrue(o.isFilled())
-        self.assertEquals(o.getAction(), broker.Order.Action.BUY)
-        self.assertEquals(o.getAvgFillPrice(), 100)
-        self.assertEquals(o.getQuantity(), 1)
-        self.assertEquals(o.getFilled(), 1)
-        self.assertEquals(o.getRemaining(), 0)
+        self.assertEqual(o.getAction(), broker.Order.Action.BUY)
+        self.assertEqual(o.getAvgFillPrice(), 100)
+        self.assertEqual(o.getQuantity(), 1)
+        self.assertEqual(o.getFilled(), 1)
+        self.assertEqual(o.getRemaining(), 0)
         self.assertEqual(strat.orderUpdatedCalls, 3)
         self.assertEqual(o.getExecutionInfo().getDateTime(), datetime.datetime(2000, 1, 5))
 
@@ -206,11 +206,11 @@
         o = strat.stopLimitOrder(StrategyTestCase.TestInstrument, 100, 110, -2, True)
         strat.run()
         self.assertTrue(o.isFilled())
-        self.assertEquals(o.getAction(), broker.Order.Action.SELL)
-        self.assertEquals(o.getAvgFillPrice(), 110)
-        self.assertEquals(o.getQuantity(), 2)
-        self.assertEquals(o.getFilled(), 2)
-        self.assertEquals(o.getRemaining(), 0)
+        self.assertEqual(o.getAction(), broker.Order.Action.SELL)
+        self.assertEqual(o.getAvgFillPrice(), 110)
+        self.assertEqual(o.getQuantity(), 2)
+        self.assertEqual(o.getFilled(), 2)
+        self.assertEqual(o.getRemaining(), 0)
         self.assertEqual(strat.orderUpdatedCalls, 3)
         self.assertEqual(o.getExecutionInfo().getDateTime(), datetime.datetime(2000, 1, 10))
 
--- tests/talib_test.py	(original)
+++ tests/talib_test.py	(refactored)
@@ -183,7 +183,7 @@
 
     def __loadMedPriceDS(self):
         ret = dataseries.SequenceDataSeries()
-        for i in xrange(len(OPEN_VALUES)):
+        for i in range(len(OPEN_VALUES)):
             ret.append(LOW_VALUES[i] + (HIGH_VALUES[i] - LOW_VALUES[i]) / 2.0)
         return ret
 
@@ -191,7 +191,7 @@
         seconds = 0
 
         ret = bards.BarDataSeries()
-        for i in xrange(len(OPEN_VALUES)):
+        for i in range(len(OPEN_VALUES)):
             dateTime = datetime.datetime.now() + datetime.timedelta(seconds=seconds)
             ret.append(bar.BasicBar(dateTime, OPEN_VALUES[i], HIGH_VALUES[i], LOW_VALUES[i], CLOSE_VALUES[i], VOLUME_VALUES[i], CLOSE_VALUES[i], bar.Frequency.DAY))
             seconds += 1
@@ -201,7 +201,7 @@
         seconds = 0
 
         ret = bards.BarDataSeries()
-        for i in xrange(len(SAR_HIGH)):
+        for i in range(len(SAR_HIGH)):
             dateTime = datetime.datetime.now() + datetime.timedelta(seconds=seconds)
             ret.append(bar.BasicBar(dateTime, SAR_LOW[i], SAR_HIGH[i], SAR_LOW[i], SAR_HIGH[i], 0, SAR_LOW[i], bar.Frequency.DAY))
             seconds += 1
--- tests/technical_atr_test.py	(original)
+++ tests/technical_atr_test.py	(refactored)
@@ -39,7 +39,7 @@
         barDataSeries = bards.BarDataSeries()
         atrDS = atr.ATR(barDataSeries, 14)
         now = datetime.datetime(2000, 1, 1)
-        for i in xrange(len(high)):
+        for i in range(len(high)):
             b = bar.BasicBar(now + datetime.timedelta(days=i), close[i], high[i], low[i], close[i], 100, close[i], bar.Frequency.DAY)
             barDataSeries.append(b)
             self.assertEqual(common.safe_round(atrDS[-1], 2), expected[i])
@@ -55,7 +55,7 @@
         barDataSeries = bards.BarDataSeries()
         atrDS = atr.ATR(barDataSeries, 14, True)
         now = datetime.datetime(2000, 1, 1)
-        for i in xrange(len(high)):
+        for i in range(len(high)):
             b = bar.BasicBar(now + datetime.timedelta(days=i), close[i], high[i], low[i], close[i], 100, close[i]/2, bar.Frequency.DAY)
             barDataSeries.append(b)
             if expected[i] is None:
--- tests/technical_bollinger_test.py	(original)
+++ tests/technical_bollinger_test.py	(refactored)
@@ -21,7 +21,7 @@
 from mooquant import dataseries
 from mooquant.technical import bollinger
 
-import common
+from . import common
 
 
 class TestCase(common.TestCase):
@@ -37,12 +37,12 @@
         for value in prices:
             seqDS.append(value)
 
-        for i in xrange(19):
+        for i in range(19):
             self.assertEqual(bBands.getMiddleBand()[i], None)
             self.assertEqual(bBands.getUpperBand()[i], None)
             self.assertEqual(bBands.getLowerBand()[i], None)
 
-        for i in xrange(19, len(seqDS)):
+        for i in range(19, len(seqDS)):
             self.assertEqual(round(bBands.getMiddleBand()[i], 2), expectedMiddle[i-19])
             self.assertEqual(round(bBands.getUpperBand()[i], 2), expectedUpper[i-19])
             self.assertEqual(round(bBands.getLowerBand()[i], 2), expectedLower[i-19])
@@ -59,7 +59,7 @@
         for value in prices:
             seqDS.append(value)
 
-        for i in xrange(3):
+        for i in range(3):
             self.assertEqual(round(bBands.getMiddleBand()[i], 2), expectedMiddle[i])
             self.assertEqual(round(bBands.getUpperBand()[i], 2), expectedUpper[i])
             self.assertEqual(round(bBands.getLowerBand()[i], 2), expectedLower[i])
--- tests/technical_hurst_test.py	(original)
+++ tests/technical_hurst_test.py	(refactored)
@@ -37,35 +37,35 @@
     def testHurstExpFunRandomWalk(self):
         values = np.cumsum(np.random.randn(50000)) + 1000
         h = hurst.hurst_exp(np.log10(values), 2, 20)
-        self.assertEquals(round(h, 1), 0.5)
+        self.assertEqual(round(h, 1), 0.5)
 
     def testHurstExpFunTrending(self):
         values = np.cumsum(np.random.randn(50000)+1) + 1000
         h = hurst.hurst_exp(np.log10(values), 2, 20)
-        self.assertEquals(round(h), 1)
+        self.assertEqual(round(h), 1)
 
     def testHurstExpFunMeanRev(self):
         values = (np.random.randn(50000)) + 1000
         h = hurst.hurst_exp(np.log10(values), 2, 20)
-        self.assertEquals(round(h), 0)
+        self.assertEqual(round(h), 0)
 
     def testRandomWalk(self):
         num_values = 10000
         values = np.cumsum(np.random.randn(num_values)) + 1000
         hds = build_hurst(values, num_values - 10, 2, 20)
-        self.assertEquals(round(hds[-1], 1), 0.5)
-        self.assertEquals(round(hds[-2], 1), 0.5)
+        self.assertEqual(round(hds[-1], 1), 0.5)
+        self.assertEqual(round(hds[-2], 1), 0.5)
 
     def testTrending(self):
         num_values = 10000
         values = np.cumsum(np.random.randn(num_values) + 10) + 1000
         hds = build_hurst(values, num_values - 10, 2, 20)
-        self.assertEquals(round(hds[-1], 1), 1)
-        self.assertEquals(round(hds[-2], 1), 1)
+        self.assertEqual(round(hds[-1], 1), 1)
+        self.assertEqual(round(hds[-2], 1), 1)
 
     def testMeanRev(self):
         num_values = 10000
         values = np.random.randn(num_values) + 100
         hds = build_hurst(values, num_values - 10, 2, 20)
-        self.assertEquals(round(hds[-1], 1), 0)
-        self.assertEquals(round(hds[-2], 1), 0)
+        self.assertEqual(round(hds[-1], 1), 0)
+        self.assertEqual(round(hds[-2], 1), 0)
--- tests/technical_linebreak_test.py	(original)
+++ tests/technical_linebreak_test.py	(refactored)
@@ -21,7 +21,7 @@
 from mooquant.barfeed import yahoofeed
 from mooquant.technical import linebreak
 
-import common
+from . import common
 
 
 class LineBreakTestCase(common.TestCase):
--- tests/technical_linreg_test.py	(original)
+++ tests/technical_linreg_test.py	(refactored)
@@ -23,7 +23,7 @@
 from mooquant import dataseries
 from mooquant.technical import linreg
 
-import common
+from . import common
 
 
 class LeastSquaresRegressionTestCase(common.TestCase):
--- tests/technical_ma_test.py	(original)
+++ tests/technical_ma_test.py	(refactored)
@@ -22,7 +22,7 @@
 from mooquant.barfeed import ninjatraderfeed
 from mooquant.technical import ma
 
-import common
+from . import common
 
 
 def safe_round(number, ndigits):
@@ -78,18 +78,18 @@
 
     def testMultipleValues(self):
         period = 5
-        values = range(1, 10)
+        values = list(range(1, 10))
         sma = self.__buildSMA(period, values)
-        for i in xrange(period-1, len(values)):
+        for i in range(period-1, len(values)):
             expected = sum(values[i-(period-1):i+1]) / float(period)
             self.assertTrue(sma[i] == expected)
 
     def testMultipleValuesSkippingOne(self):
         # Test SMA invalidating fast sma calculation.
         period = 5
-        values = range(1, 10)
+        values = list(range(1, 10))
         sma = self.__buildSMA(period, values)
-        for i in xrange(period-1, len(values), 2):
+        for i in range(period-1, len(values), 2):
             expected = sum(values[i-(period-1):i+1]) / float(period)
             self.assertTrue(sma[i] == expected)
 
@@ -102,12 +102,12 @@
 
     def testSeqLikeOps(self):
         # ds and seq should be the same.
-        seq = [1.0 for i in xrange(10)]
+        seq = [1.0 for i in range(10)]
         ds = self.__buildSMA(1, seq)
 
         # Test length and every item.
         self.assertEqual(len(ds), len(seq))
-        for i in xrange(len(seq)):
+        for i in range(len(seq)):
             self.assertEqual(ds[i], seq[i])
 
         # Test negative indices
@@ -123,11 +123,11 @@
         sl = slice(0, -1, 1)
         self.assertEqual(ds[sl], seq[sl])
 
-        for i in xrange(-100, 100):
+        for i in range(-100, 100):
             self.assertEqual(ds[i:], seq[i:])
 
-        for step in xrange(1, 10):
-            for i in xrange(-100, 100):
+        for step in range(1, 10):
+            for i in range(-100, 100):
                 self.assertEqual(ds[i::step], seq[i::step])
 
     def testEventWindow(self):
@@ -135,7 +135,7 @@
         smaEW = ma.SMAEventWindow(10)
         sma = ma.SMA(ds, 10)
         smaEW.onNewValue(None, None)  # This value should get skipped
-        for i in xrange(100):
+        for i in range(100):
             ds.append(i)
             smaEW.onNewValue(None, i)
             self.assertEqual(sma[-1], smaEW.getValue())
--- tests/technical_macd_test.py	(original)
+++ tests/technical_macd_test.py	(refactored)
@@ -21,7 +21,7 @@
 from mooquant import dataseries
 from mooquant.technical import macd
 
-import common
+from . import common
 
 
 class MACDTestCase(common.TestCase):
--- tests/technical_ratio_test.py	(original)
+++ tests/technical_ratio_test.py	(refactored)
@@ -21,7 +21,7 @@
 from mooquant import dataseries
 from mooquant.technical import ratio
 
-import common
+from . import common
 
 
 class TestCase(common.TestCase):
--- tests/technical_roc_test.py	(original)
+++ tests/technical_roc_test.py	(refactored)
@@ -21,7 +21,7 @@
 from mooquant import dataseries
 from mooquant.technical import roc
 
-import common
+from . import common
 
 
 class ROCTestCase(common.TestCase):
@@ -59,12 +59,12 @@
         inputValues = [11045.27, 11167.32, 11008.61, 11151.83, 10926.77, 10868.12, 10520.32, 10380.43, 10785.14, 10748.26, 10896.91, 10782.95, 10620.16, 10625.83, 10510.95, 10444.37, 10068.01, 10193.39, 10066.57, 10043.75]
         outputValues = [-4.31, -3.24]
         roc_ = self.__buildROC(inputValues, 12, 2)
-        for i in xrange(2):
+        for i in range(2):
             self.assertEqual(round(roc_[i], 4), round(outputValues[i] / 100, 4))
 
     def testZeroes(self):
         inputValues = [0, 0, 0]
         outputValues = [None, 0, 0]
         roc_ = self.__buildROC(inputValues, 1)
-        for i in xrange(len(inputValues)):
+        for i in range(len(inputValues)):
             self.assertEqual(roc_[i], outputValues[i])
--- tests/technical_rsi_test.py	(original)
+++ tests/technical_rsi_test.py	(refactored)
@@ -21,7 +21,7 @@
 from mooquant import dataseries
 from mooquant.technical import rsi
 
-import common
+from . import common
 
 
 class TestCase(common.TestCase):
@@ -66,7 +66,7 @@
         common.test_from_csv(self, "rsi-test.csv", lambda inputDS: rsi.RSI(inputDS, 14), 3)
 
     def testDateTimes(self):
-        rsi = self.__buildRSI(range(10), 3)
+        rsi = self.__buildRSI(list(range(10)), 3)
 
         self.assertEqual(len(rsi.getDateTimes()), 10)
         for i in range(len(rsi)):
--- tests/technical_stats_test.py	(original)
+++ tests/technical_stats_test.py	(refactored)
@@ -22,7 +22,7 @@
 from mooquant import dataseries
 from mooquant.technical import stats
 
-import common
+from . import common
 
 
 class TestCase(common.TestCase):
--- tests/technical_stoch_test.py	(original)
+++ tests/technical_stoch_test.py	(refactored)
@@ -24,7 +24,7 @@
 from mooquant.dataseries import bards
 from mooquant.technical import stoch
 
-import common
+from . import common
 
 
 def values_equal(v1, v2):
@@ -110,7 +110,7 @@
         self.assertEqual(len(stochFilter.getD()), 3)
         self.assertEqual(len(stochFilter.getD().getDateTimes()), 3)
 
-        for i in xrange(3):
+        for i in range(3):
             self.assertEqual(round(stochFilter[i], 4), kValues[i])
             self.assertEqual(round(stochFilter.getD()[i], 4), dValues[i])
 
--- tests/technical_test.py	(original)
+++ tests/technical_test.py	(refactored)
@@ -20,7 +20,7 @@
 
 from mooquant import dataseries, technical
 
-import common
+from . import common
 
 
 class TestEventWindow(technical.EventWindow):
--- tests/technical_trend_test.py	(original)
+++ tests/technical_trend_test.py	(refactored)
@@ -21,7 +21,7 @@
 from mooquant import dataseries
 from mooquant.technical import linreg
 
-import common
+from . import common
 
 
 class SlopeTest(common.TestCase):
@@ -86,5 +86,5 @@
 
     def testInvalidThreshold(self):
         seqDS = dataseries.SequenceDataSeries()
-        with self.assertRaisesRegexp(Exception, "Invalid thresholds"):
+        with self.assertRaisesRegex(Exception, "Invalid thresholds"):
             linreg.Trend(seqDS, 10, 0.2, 0.5, 5)
--- tests/technical_vwap_test.py	(original)
+++ tests/technical_vwap_test.py	(refactored)
@@ -21,7 +21,7 @@
 from mooquant.barfeed import yahoofeed
 from mooquant.technical import vwap
 
-import common
+from . import common
 
 
 class VWAPTestCase(common.TestCase):
@@ -38,7 +38,7 @@
         bars = barFeed[VWAPTestCase.Instrument]
         vwap_ = vwap.VWAP(bars, 1)
         barFeed.loadAll()
-        for i in xrange(len(bars)):
+        for i in range(len(bars)):
             self.assertEqual(round(bars[i].getClose(), 5), round(vwap_[i], 5))
 
     def testPeriod1_TypicalPrice(self):
@@ -46,7 +46,7 @@
         bars = barFeed[VWAPTestCase.Instrument]
         vwap_ = vwap.VWAP(bars, 1, True)
         barFeed.loadAll()
-        for i in xrange(len(bars)):
+        for i in range(len(bars)):
             self.assertEqual(round(bars[i].getTypicalPrice(), 5), round(vwap_[i], 5))
 
     def testPeriod2_ClosingPrice(self):
@@ -55,7 +55,7 @@
         vwap_ = vwap.VWAP(bars, 2)
         barFeed.loadAll()
         self.assertEqual(vwap_[0], None)
-        for i in xrange(1, len(vwap_)):
+        for i in range(1, len(vwap_)):
             self.assertNotEqual(vwap_[i], None)
 
     def testPeriod2_TypicalPrice(self):
@@ -64,7 +64,7 @@
         vwap_ = vwap.VWAP(bars, 2, True)
         barFeed.loadAll()
         self.assertEqual(vwap_[0], None)
-        for i in xrange(1, len(vwap_)):
+        for i in range(1, len(vwap_)):
             self.assertNotEqual(vwap_[i], None)
 
     def testPeriod50_ClosingPrice(self):
@@ -72,9 +72,9 @@
         bars = barFeed[VWAPTestCase.Instrument]
         vwap_ = vwap.VWAP(bars, 50)
         barFeed.loadAll()
-        for i in xrange(49):
+        for i in range(49):
             self.assertEqual(vwap_[i], None)
-        for i in xrange(49, len(vwap_)):
+        for i in range(49, len(vwap_)):
             self.assertNotEqual(vwap_[i], None)
 
     def testPeriod50_TypicalPrice(self):
@@ -82,9 +82,9 @@
         bars = barFeed[VWAPTestCase.Instrument]
         vwap_ = vwap.VWAP(bars, 50, True)
         barFeed.loadAll()
-        for i in xrange(49):
+        for i in range(49):
             self.assertEqual(vwap_[i], None)
-        for i in xrange(49, len(vwap_)):
+        for i in range(49, len(vwap_)):
             self.assertNotEqual(vwap_[i], None)
 
     def testBounded(self):
@@ -94,5 +94,5 @@
         barFeed.loadAll()
 
         outputValues = [14.605005665747331, 14.605416923506045]
-        for i in xrange(2):
+        for i in range(2):
             self.assertEqual(round(vwap_[i], 4), round(outputValues[i], 4))
--- tests/trades_analyzer_test.py	(original)
+++ tests/trades_analyzer_test.py	(refactored)
@@ -29,9 +29,9 @@
 from mooquant.broker import backtesting
 from mooquant.stratanalyzer import trades
 
-import common
-import position_test
-import strategy_test
+from . import common
+from . import position_test
+from . import strategy_test
 
 
 def buildUTCDateTime(year, month, day, hour, minute):
--- tests/utils_test.py	(original)
+++ tests/utils_test.py	(refactored)
@@ -23,7 +23,7 @@
 from mooquant import utils
 from mooquant.utils import collections, dt
 
-import common
+from . import common
 
 
 class UtilsTestCase(common.TestCase):
@@ -36,7 +36,7 @@
         self.assertEqual(utils.get_change_percentage(1, -1), 2)
         self.assertEqual(utils.get_change_percentage(-2, -1), -1)
         self.assertEqual(utils.get_change_percentage(-1.5, -1), -0.5)
-        with self.assertRaisesRegexp(Exception, "Invalid values"):
+        with self.assertRaisesRegex(Exception, "Invalid values"):
             utils.get_change_percentage(-1.5, 0)
 
     def testSafeMin(self):
@@ -169,7 +169,7 @@
         dateTimes1 = []
         dateTimes2 = []
         now = datetime.datetime.now()
-        for i in xrange(size):
+        for i in range(size):
             dateTimes1.append(now + datetime.timedelta(seconds=i))
             dateTimes2.append(now + datetime.timedelta(seconds=i))
 
@@ -178,7 +178,7 @@
         values, ix1, ix2 = collections.intersect(dateTimes1, dateTimes2)
         self.assertEqual(values, dateTimes1)
         self.assertEqual(values, dateTimes2)
-        self.assertEqual(ix1, range(size))
+        self.assertEqual(ix1, list(range(size)))
         self.assertEqual(ix1, ix2)
 
 
@@ -329,9 +329,9 @@
         self.assertEqual(dt.timestamp_to_datetime(dt.datetime_to_timestamp(dateTime), True), dateTime)
 
     def testGetFirstMonday(self):
-        self.assertEquals(dt.get_first_monday(2010), datetime.date(2010, 1, 4))
-        self.assertEquals(dt.get_first_monday(2011), datetime.date(2011, 1, 3))
+        self.assertEqual(dt.get_first_monday(2010), datetime.date(2010, 1, 4))
+        self.assertEqual(dt.get_first_monday(2011), datetime.date(2011, 1, 3))
 
     def testGetLastMonday(self):
-        self.assertEquals(dt.get_last_monday(2010), datetime.date(2010, 12, 27))
-        self.assertEquals(dt.get_last_monday(2011), datetime.date(2011, 12, 26))
+        self.assertEqual(dt.get_last_monday(2010), datetime.date(2010, 12, 27))
+        self.assertEqual(dt.get_last_monday(2011), datetime.date(2011, 12, 26))
